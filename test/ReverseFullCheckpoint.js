const { expect } = require("chai");
const { ethers } = require("hardhat");
const {
  loadFixture,
} = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const {
  getGenesis,
  hex2Arr,
  blockToHash,
  hash,
  encoded,
  getSigs,
  composeAndSignBlock,
  createValidators,
} = require("./libraries/Utils");

describe("reverse full checkpoint", () => {
  const genesis =
    "0xf90c1aa05cc1f1b6f2608c23816562ac2b959cc787593045b8a955c0275dfd91c21969e9a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a022c8813d7f802f94d3a279515a032e0da9d6430dda6a4512cb4872852ab7a84aa0c4e1c95bc0f6a7a478fc5319722dc984fd0d784a9ae692e6ffd88adb8843e44fa0bcd2a51669cdca54e5f28517bcd09ca95007951a7d7ec181cb3f361f783cde4ab901000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000065836bf0d0841908b10080846489d87fb90845d8830200008358444389676f312e31342e3135856c696e75780000000000000002e98d4800a1369868aff80d0c82b0c668108ac309be15344bf20d7207d87dd41b5b9a6ea7c41f760ef0bdd3d485d84fb46fd20c88b3f9d3ed5e03731362c3a7752c0059f663af89f73b17f7b8642c6d14f375e18a878abb4b713328e392abce98f07bfd1987873cc0ad97599d5f7b80602bfa942b52e4391997d2fca748a251c7dc12216cccd4532adf72e81de985a7037fe83cf0c938b498b4ba7de02d890e21196cccb5b588a6fea44c23c6e156d7711c30772150dd6f5c8f2b078a2a6df0538e2ad69661fb9d2432da278eae64e310382744581fc1f2fd36674524edeba8b4e89329a86a41c940d99b55085164f125c0f3009282bb10114229787df2b39f9cfcb8232aee05a4089dd483a2cbfc0388e5a4069289c8482ef96e7e896a8e4df917e90753249526a23b974c2fa91ce4c5f072b0a5bee07955124f259d8bf9bb311bdf9066246e68559816e7f636435867f824ef31d6d14124ba0f54df91e1e5812e3d76a35d0db631d6f7553bf0a9ad038a84f3edc1d694e93a1d11320b183a4d5d9cf5e2fc9f5b9ce7e8df5ab0d11032606c74a18c3e97fa0e87d2e64096852676740f33f5430cc4430168a672a7a447cd8f9753840b3d3880873e90db6a3fc103d08a79a78da145c8dd503a325916f342fbdbd3b890442b668c6a1d8872423ea65e96d70ef812c87beb85ce6d4b017815dc26442a44a6fc20f5b8dfa8b304d7137581f7e6bef345b2277d51d3a79f2b862bb4061d2c7689aa747e47318441696e9ae962633c16e04d53935272639d492e4a95b058af0700743c623497969ed8f877f44a463178f69e99a9ca55d589bf5a52cfbda21e625058dfe24ef6b537b5bc47116a45f0428da182fa52e78df27ca83be8716a77882da63a8dac227dac537fc89618edae86950e12687a612e15c4786b8453889bdf5a2b4e73164a350b05828e178ecd8e0954b337ae16f0d2503035a135854339129311a9aa55dd80e54c9a055fb9e4707e315f94dc3e3de7d258f319405ebc54d6af94051eba88f72faed209fe5d526a911c446536e28034f0d6ab7fd6c3e6a6b460b64be79975292f39d4143dd2024d11ee1040ff6965556e29fa531dbfa09ea0b86aca0019eaa5b66a3c21fc43d3a83605b6c1059fbf643fad3610836a8a9bda9e07f06d865009cae6bc49799132314d73898cc3c5beca5841306b26fdb4e30411392a6a74826141342a4dc33a1045cefa4182b6212ec0317720793aa90b37f690a4b30d51b393b7b25ba4d27bab2893881f5bd4818f7ba7e37eb88e28b4d7507bc30fbeb7208192d1474b5f87ffbc056de43c117e74c953fd114917049df193ff41183f5c7dcc7b819ae84bb23b6b7b36ad5c4c24081cd4198ba885888c073313b36cf03cf1f739f39443551ff12bbe8bb6ec97227cabeea13bc95488afce99fd798c598c16ecad3a93a2bcb3da3f8568d1ad91a83233af8d993351c0e2db739f9bcbfdeda94d73b50b16d39344e5fbb404ada5c610ef621404b5b8ecf4f6259c2dfc7c4e76865826559dd3de57044d2a87b6689cb0f80ac5a82dcf2e1ea59f0342f05c0205e5d89da7d94647c13e365e7853830f2135c70c6e0252a019e95cf81af68c7d6ee555fc43ba235d923fdea242960b7ca1937e826bda6c397df74d9f9ab01aa533166516f1e8828b5cbb8fc3fdfa5ec9a7548ea89af636787499e81362e815e36f28763eac120babebf5a6cbe6113780cbe489e3eb0db882381aebad378a4029f19ad548de4c77cfa8acdda4e77f5eae1662eeec3e17cc34e69f90b8bf59bb1a104a30aeecdc584921a3f2a056cb10f543ea59f8712ec4af81190100d82f41ad2c95898195c7a47dc59115b4b6c967331fc8ac25c217bbccf41ff3e093aaa0bb5ec85408683795da2f604a5c0464868eabfcb6be323be86be3a2027a3a2300d974e01b7cd036d5bf44f8461f28d92035a48a359d16c0ccf70b065fbfc2405e700adda95c0074fd23c967006e8f3230c03e80173d064c3c531993fae8b4d26a58b53e35c1981f17a3910184229a15720785d9b21b1cf614c4aeb81f04ea2e64472d641ccc255579eb020e42c66573a4140a602aecf8a309bea2b2d177a5e483c9de8a53efee40b5fe7709bf5df8d489d0c85fa7cb708982e7fa6d25fb2d9d5683b760f32d739882cc9e345ee1af902b2050cf2323f0e5a3f490248fd140ec37a498c6e70af60078076f9bc03cc89dcdd98213654ca7b02faa29304f33fe7f13fbd235bcda489a1b4304f49aafaec938c7adc48539470624db62b4dd36639ef98d3fc58faf6637674bd9809fddae1c3af791ea6b606bc5638a58bccdde5e152cde58a9d66c8cb5dff6e56faa539f7e3b97cccc62df459d6eeb1d9ceab66d345a26f87539238d72f4e1f9c75ce33e568d8fa3ace90497ee0c60dc921ee2564404fa114b050fe0924ce63518ef4882a6b3e569b1a1121011f5ffe17da1c9f26d9940963740e57257f763c132b82d8d4acc924fac41dffbbea6e6f9b461be5163b04cdccd27d0ff91e007e00836e94daf039d19c85301421b91d326aef7878e725ae99d6a75ddbaabde90c8e6805b4c09c6ace40a6eecd75ddf42695b955a7a827b24833d256f8d7aa7ecd8b40edba44083f97bf5df2a5009115ef6507bef2307a809183154b1f00ef231a25bf9013ccbc9efa69a1a0b87b49884255e30cc2e27082b36550ef3cb1e42ce09cc1b59111d017f848aa929c8ea84fa58562b39fc3125f567277dd4c04fcfa3d75f5ffc087e2622b02b0bb78713e872c02796ef64c8f1fd347f23c20b5e1256c1885bcece4786e151fe05fd63783e43070be1a305cd21013b659823e335cafb7659bb01589776211a5b0a00f19eadb1964609f11f0368fed01457792da39565c4f08e173a6678f9038b687fada03ff9da67860fc0a5b8590ccb3e3ba2dcc800a00000000000000000000000000000000000000000000000000000000000000000880000000000000000bb84116764d93a3f2fe5b9ea07a271dee366bad642281f0fe056d79144098ca90e59316b51bf87b09343329e874666b75a51c2f5c327bdcbb0b050b6fad052fd606b90180";

  const block7074002Encoded =
    "";

  const block3Encoded =
    "0xf90379a0042d032a8d2a2e413b7e778f67f63f0314ecce78a56bb8a21e30249ff9048d71a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479410982668af23d3e4b8d26805543618412ac724d4a03a9114857792f2a10b4d04ded4e29cb2371535ed749a7686aa2e9885c6007e25a0aa5c22a6b44642cb26e615b25909c4ce85fa09c6d07be8dd277c16a41913b752a0f1e9711aafd2cc3a654c508ff781ff01ebaf495cc3a80f1ac689b745b2f3c8e7bb100808464d68e43b9013c02f9013805f90134e3a0042d032a8d2a2e413b7e778f67f63f0314ecce78a56bb8a21e30249ff9048d710402f9010cb84168483ea8067e3432d01a1ed3e401e4373c87bfbc55f8082cf9f2b3d1f402c681480297e1239f13bc9d619789f59f2fbdb1f48fcae327d746094cfacce4a6bb7601b841b329b2b5ca5750dcc45600a63cf36cb633e1ba932e0273c06cf040f62e18d0604391ef2af450c815b895e06000f4e34dcd13ef299d5dcc6e9db6561c13080a4400b841576e03c4ecc1f124fb41218004de36f818bae7e61b6c40a1deb06bf7aa05e1d87cee514d6c36098cde2c6537fb6c556774a4d382dbdeae37b6c676d5d509e1c200b841f354a8eaa22bfd983cb6669974b7de78e229094e315d095646c970a96e3615021de832730b17fa1833b3032d9c25e1b1887418747a845761cf546bd4ba83d5e20180a00000000000000000000000000000000000000000000000000000000000000000880000000000000000b841d1570a04d189780140c9c71120b24edef830c1320fd28a928cd31e88e1b2f3a768967615e887f466d78b57a5bbf54a0750be466f2a90e961acf8bc1203166dff01c0c0c0";
  const block4Encoded =
    "0xf90379a0943df401cff04f6f72268e63e1f2737c7bee3347de6175779af3f0247588c3c5a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347946f3c1d8ba6cc6b6fb6387b0fe5d2d37a822b2614a03a9114857792f2a10b4d04ded4e29cb2371535ed749a7686aa2e9885c6007e25a0774ec1306070d707c45375189ea663a3a74c7c2c03a1727606a73bef6ffe43bfa0bcd2a51669cdca54e5f28517bcd09ca95007951a7d7ec181cb3f361f783cde4abb100808464d68e45b9013c02f9013806f90134e3a0943df401cff04f6f72268e63e1f2737c7bee3347de6175779af3f0247588c3c50503f9010cb841af3c37e0578631f766aa0bcb67e451a003da396b1fc10d2b1cadd9f9cd0fe1d2368792de099fed569d6d9623dedde2db871aef9b26f23d0c7419cf57ecfa67f401b84106891a6d4bc73bc4295f9d00b17d62fffbdd34032803c35cc7cbc7eec57b7ca70d236906e9ab55ae61eab0a95a031fc1394c64b06dcdd08be9d298a9c5067f7a00b84166b00fa8f3338824792e82b4e8b31c45f8a0ced6cb163c0399de258b0611173d527558063504fba8745b18dc7179b268afe48f76744cf52bfb4ad78fc9cccd5100b841cb27696ff615ee3b4780bd31db1c67823b8d40389ac4b9e4df7d922f02f712463c4c4f658ae582b3bd8ec8bd1382feabf960353511156aa59fd87da60abc272b0180a00000000000000000000000000000000000000000000000000000000000000000880000000000000000b84147a9f90eae46c16b2b34158606284a62d3bee421fadc28d588cde83a203db6d11d0e549bd6f05bb8341789935faebb2310cbb72a923a083e9e20869eba1833ea01c0c0c0";
  const block5Encoded =
    "0xf90379a05c0edc00bb0dae82277c4018f52af29663fdab3ddd8c3a6b5992b5954a2bc347a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479480f489a673042c2e5f17e5b2a5e49d71bf0611a4a03a9114857792f2a10b4d04ded4e29cb2371535ed749a7686aa2e9885c6007e25a0f8decd77dd41d9af5111633085d026e6d51c46c72df707e341e4e429e148471ea0bcd2a51669cdca54e5f28517bcd09ca95007951a7d7ec181cb3f361f783cde4ab90100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000105841908b100808464d68e47b9013c02f9013807f90134e3a05c0edc00bb0dae82277c4018f52af29663fdab3ddd8c3a6b5992b5954a2bc3470604f9010cb841000d7dc02cf85bd31f296f38cbcac70731da3890fab990918e5d3e6c45ad6666083030dfdbd419ffd285dba33444b4bd8314f2ba790a013379eafca701b2979201b841fbf5be8f55b05e7e25a11c0b9944120bc3493dd8f142423473dc4ad3ead4d45d56c0f58a5cc0762b8e162a66fa571e5a7c91e3161be455d8e3aeebc29657e16901b84122ba8ebd01d3329140b5396168e71d6733656ec3441bf999c0fda45cbe0bd93829a1c24e046ec01953b159389a24762da44f5c50efcef025cf103c4ad024f5d900b841ff2d8e3ff4b02bd745fe260378e435536476f4c48d1934a60cd396c5c12936ed079c0d93d143d1266b0ca9a90ae80f8f424986cde01363bd5305e7dffd653ea90180a00000000000000000000000000000000000000000000000000000000000000000880000000000000000b8413a919aa9491748d75f986e7a20c298ed7c8928f45ea339bb7e994308714a988e794c7d15a8e6f4f95a244d1a1139b092181ea4863a12238cf96c22c63b6912be00c0c0c0";

  let checkpoint;
  let custom;
  let customValidators;
  let customBlock0;
  let customeBlock1;

  const fixture = async () => {
    const factory = await ethers.getContractFactory("ReverseFullCheckpoint");
    const checkpoint = await factory.deploy();
    await checkpoint.init(
      [
        "0x02e98d4800a1369868aff80d0c82b0c668108ac3",
        "0x09be15344bf20d7207d87dd41b5b9a6ea7c41f76",
        "0x0ef0bdd3d485d84fb46fd20c88b3f9d3ed5e0373",
        "0x1362c3a7752c0059f663af89f73b17f7b8642c6d",
        "0x14f375e18a878abb4b713328e392abce98f07bfd",
        "0x1987873cc0ad97599d5f7b80602bfa942b52e439",
        "0x1997d2fca748a251c7dc12216cccd4532adf72e8",
        "0x1de985a7037fe83cf0c938b498b4ba7de02d890e",
        "0x21196cccb5b588a6fea44c23c6e156d7711c3077",
        "0x2150dd6f5c8f2b078a2a6df0538e2ad69661fb9d",
        "0x2432da278eae64e310382744581fc1f2fd366745",
        "0x24edeba8b4e89329a86a41c940d99b55085164f1",
        "0x25c0f3009282bb10114229787df2b39f9cfcb823",
        "0x2aee05a4089dd483a2cbfc0388e5a4069289c848",
        "0x2ef96e7e896a8e4df917e90753249526a23b974c",
        "0x2fa91ce4c5f072b0a5bee07955124f259d8bf9bb",
        "0x311bdf9066246e68559816e7f636435867f824ef",
        "0x31d6d14124ba0f54df91e1e5812e3d76a35d0db6",
        "0x31d6f7553bf0a9ad038a84f3edc1d694e93a1d11",
        "0x320b183a4d5d9cf5e2fc9f5b9ce7e8df5ab0d110",
        "0x32606c74a18c3e97fa0e87d2e64096852676740f",
        "0x33f5430cc4430168a672a7a447cd8f9753840b3d",
        "0x3880873e90db6a3fc103d08a79a78da145c8dd50",
        "0x3a325916f342fbdbd3b890442b668c6a1d887242",
        "0x3ea65e96d70ef812c87beb85ce6d4b017815dc26",
        "0x442a44a6fc20f5b8dfa8b304d7137581f7e6bef3",
        "0x45b2277d51d3a79f2b862bb4061d2c7689aa747e",
        "0x47318441696e9ae962633c16e04d53935272639d",
        "0x492e4a95b058af0700743c623497969ed8f877f4",
        "0x4a463178f69e99a9ca55d589bf5a52cfbda21e62",
        "0x5058dfe24ef6b537b5bc47116a45f0428da182fa",
        "0x52e78df27ca83be8716a77882da63a8dac227dac",
        "0x537fc89618edae86950e12687a612e15c4786b84",
        "0x53889bdf5a2b4e73164a350b05828e178ecd8e09",
        "0x54b337ae16f0d2503035a135854339129311a9aa",
        "0x55dd80e54c9a055fb9e4707e315f94dc3e3de7d2",
        "0x58f319405ebc54d6af94051eba88f72faed209fe",
        "0x5d526a911c446536e28034f0d6ab7fd6c3e6a6b4",
        "0x60b64be79975292f39d4143dd2024d11ee1040ff",
        "0x6965556e29fa531dbfa09ea0b86aca0019eaa5b6",
        "0x6a3c21fc43d3a83605b6c1059fbf643fad361083",
        "0x6a8a9bda9e07f06d865009cae6bc49799132314d",
        "0x73898cc3c5beca5841306b26fdb4e30411392a6a",
        "0x74826141342a4dc33a1045cefa4182b6212ec031",
        "0x7720793aa90b37f690a4b30d51b393b7b25ba4d2",
        "0x7bab2893881f5bd4818f7ba7e37eb88e28b4d750",
        "0x7bc30fbeb7208192d1474b5f87ffbc056de43c11",
        "0x7e74c953fd114917049df193ff41183f5c7dcc7b",
        "0x819ae84bb23b6b7b36ad5c4c24081cd4198ba885",
        "0x888c073313b36cf03cf1f739f39443551ff12bbe",
        "0x8bb6ec97227cabeea13bc95488afce99fd798c59",
        "0x8c16ecad3a93a2bcb3da3f8568d1ad91a83233af",
        "0x8d993351c0e2db739f9bcbfdeda94d73b50b16d3",
        "0x9344e5fbb404ada5c610ef621404b5b8ecf4f625",
        "0x9c2dfc7c4e76865826559dd3de57044d2a87b668",
        "0x9cb0f80ac5a82dcf2e1ea59f0342f05c0205e5d8",
        "0x9da7d94647c13e365e7853830f2135c70c6e0252",
        "0xa019e95cf81af68c7d6ee555fc43ba235d923fde",
        "0xa242960b7ca1937e826bda6c397df74d9f9ab01a",
        "0xa533166516f1e8828b5cbb8fc3fdfa5ec9a7548e",
        "0xa89af636787499e81362e815e36f28763eac120b",
        "0xabebf5a6cbe6113780cbe489e3eb0db882381aeb",
        "0xad378a4029f19ad548de4c77cfa8acdda4e77f5e",
        "0xae1662eeec3e17cc34e69f90b8bf59bb1a104a30",
        "0xaeecdc584921a3f2a056cb10f543ea59f8712ec4",
        "0xaf81190100d82f41ad2c95898195c7a47dc59115",
        "0xb4b6c967331fc8ac25c217bbccf41ff3e093aaa0",
        "0xbb5ec85408683795da2f604a5c0464868eabfcb6",
        "0xbe323be86be3a2027a3a2300d974e01b7cd036d5",
        "0xbf44f8461f28d92035a48a359d16c0ccf70b065f",
        "0xbfc2405e700adda95c0074fd23c967006e8f3230",
        "0xc03e80173d064c3c531993fae8b4d26a58b53e35",
        "0xc1981f17a3910184229a15720785d9b21b1cf614",
        "0xc4aeb81f04ea2e64472d641ccc255579eb020e42",
        "0xc66573a4140a602aecf8a309bea2b2d177a5e483",
        "0xc9de8a53efee40b5fe7709bf5df8d489d0c85fa7",
        "0xcb708982e7fa6d25fb2d9d5683b760f32d739882",
        "0xcc9e345ee1af902b2050cf2323f0e5a3f490248f",
        "0xd140ec37a498c6e70af60078076f9bc03cc89dcd",
        "0xd98213654ca7b02faa29304f33fe7f13fbd235bc",
        "0xda489a1b4304f49aafaec938c7adc48539470624",
        "0xdb62b4dd36639ef98d3fc58faf6637674bd9809f",
        "0xddae1c3af791ea6b606bc5638a58bccdde5e152c",
        "0xde58a9d66c8cb5dff6e56faa539f7e3b97cccc62",
        "0xdf459d6eeb1d9ceab66d345a26f87539238d72f4",
        "0xe1f9c75ce33e568d8fa3ace90497ee0c60dc921e",
        "0xe2564404fa114b050fe0924ce63518ef4882a6b3",
        "0xe569b1a1121011f5ffe17da1c9f26d9940963740",
        "0xe57257f763c132b82d8d4acc924fac41dffbbea6",
        "0xe6f9b461be5163b04cdccd27d0ff91e007e00836",
        "0xe94daf039d19c85301421b91d326aef7878e725a",
        "0xe99d6a75ddbaabde90c8e6805b4c09c6ace40a6e",
        "0xecd75ddf42695b955a7a827b24833d256f8d7aa7",
        "0xecd8b40edba44083f97bf5df2a5009115ef6507b",
        "0xef2307a809183154b1f00ef231a25bf9013ccbc9",
        "0xefa69a1a0b87b49884255e30cc2e27082b36550e",
        "0xf3cb1e42ce09cc1b59111d017f848aa929c8ea84",
        "0xfa58562b39fc3125f567277dd4c04fcfa3d75f5f",
        "0xfc087e2622b02b0bb78713e872c02796ef64c8f1",
        "0xfd347f23c20b5e1256c1885bcece4786e151fe05",
        "0xfd63783e43070be1a305cd21013b659823e335ca",
      ],
      genesis,
      "0xf90a53a0df1eb735dc7de572c13109a8c2377e1f11c131d061c6552bf690dcfa27f9498da01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479409be15344bf20d7207d87dd41b5b9a6ea7c41f76a022c8813d7f802f94d3a279515a032e0da9d6430dda6a4512cb4872852ab7a84aa07c3200267d209f2dfd5a9bdb6577a52662944fe9f3de2ebcbada7612877b411fa0bcd2a51669cdca54e5f28517bcd09ca95007951a7d7ec181cb3f361f783cde4abbf0d1841908b10080846489d885b002ee01ece6a0df1eb735dc7de572c13109a8c2377e1f11c131d061c6552bf690dcfa27f9498d80836bf0d0c0836bef0ea00000000000000000000000000000000000000000000000000000000000000000880000000000000000b907e402e98d4800a1369868aff80d0c82b0c668108ac309be15344bf20d7207d87dd41b5b9a6ea7c41f760ef0bdd3d485d84fb46fd20c88b3f9d3ed5e03731362c3a7752c0059f663af89f73b17f7b8642c6d14f375e18a878abb4b713328e392abce98f07bfd1987873cc0ad97599d5f7b80602bfa942b52e4391997d2fca748a251c7dc12216cccd4532adf72e81de985a7037fe83cf0c938b498b4ba7de02d890e21196cccb5b588a6fea44c23c6e156d7711c30772150dd6f5c8f2b078a2a6df0538e2ad69661fb9d2432da278eae64e310382744581fc1f2fd36674524edeba8b4e89329a86a41c940d99b55085164f125c0f3009282bb10114229787df2b39f9cfcb8232aee05a4089dd483a2cbfc0388e5a4069289c8482ef96e7e896a8e4df917e90753249526a23b974c2fa91ce4c5f072b0a5bee07955124f259d8bf9bb311bdf9066246e68559816e7f636435867f824ef31d6d14124ba0f54df91e1e5812e3d76a35d0db631d6f7553bf0a9ad038a84f3edc1d694e93a1d11320b183a4d5d9cf5e2fc9f5b9ce7e8df5ab0d11032606c74a18c3e97fa0e87d2e64096852676740f33f5430cc4430168a672a7a447cd8f9753840b3d3880873e90db6a3fc103d08a79a78da145c8dd503a325916f342fbdbd3b890442b668c6a1d8872423ea65e96d70ef812c87beb85ce6d4b017815dc26442a44a6fc20f5b8dfa8b304d7137581f7e6bef345b2277d51d3a79f2b862bb4061d2c7689aa747e47318441696e9ae962633c16e04d53935272639d492e4a95b058af0700743c623497969ed8f877f44a463178f69e99a9ca55d589bf5a52cfbda21e625058dfe24ef6b537b5bc47116a45f0428da182fa52e78df27ca83be8716a77882da63a8dac227dac537fc89618edae86950e12687a612e15c4786b8453889bdf5a2b4e73164a350b05828e178ecd8e0954b337ae16f0d2503035a135854339129311a9aa55dd80e54c9a055fb9e4707e315f94dc3e3de7d258f319405ebc54d6af94051eba88f72faed209fe5d526a911c446536e28034f0d6ab7fd6c3e6a6b460b64be79975292f39d4143dd2024d11ee1040ff6965556e29fa531dbfa09ea0b86aca0019eaa5b66a3c21fc43d3a83605b6c1059fbf643fad3610836a8a9bda9e07f06d865009cae6bc49799132314d73898cc3c5beca5841306b26fdb4e30411392a6a74826141342a4dc33a1045cefa4182b6212ec0317720793aa90b37f690a4b30d51b393b7b25ba4d27bab2893881f5bd4818f7ba7e37eb88e28b4d7507bc30fbeb7208192d1474b5f87ffbc056de43c117e74c953fd114917049df193ff41183f5c7dcc7b819ae84bb23b6b7b36ad5c4c24081cd4198ba885888c073313b36cf03cf1f739f39443551ff12bbe8bb6ec97227cabeea13bc95488afce99fd798c598c16ecad3a93a2bcb3da3f8568d1ad91a83233af8d993351c0e2db739f9bcbfdeda94d73b50b16d39344e5fbb404ada5c610ef621404b5b8ecf4f6259c2dfc7c4e76865826559dd3de57044d2a87b6689cb0f80ac5a82dcf2e1ea59f0342f05c0205e5d89da7d94647c13e365e7853830f2135c70c6e0252a019e95cf81af68c7d6ee555fc43ba235d923fdea242960b7ca1937e826bda6c397df74d9f9ab01aa533166516f1e8828b5cbb8fc3fdfa5ec9a7548ea89af636787499e81362e815e36f28763eac120babebf5a6cbe6113780cbe489e3eb0db882381aebad378a4029f19ad548de4c77cfa8acdda4e77f5eae1662eeec3e17cc34e69f90b8bf59bb1a104a30aeecdc584921a3f2a056cb10f543ea59f8712ec4af81190100d82f41ad2c95898195c7a47dc59115b4b6c967331fc8ac25c217bbccf41ff3e093aaa0bb5ec85408683795da2f604a5c0464868eabfcb6be323be86be3a2027a3a2300d974e01b7cd036d5bf44f8461f28d92035a48a359d16c0ccf70b065fbfc2405e700adda95c0074fd23c967006e8f3230c03e80173d064c3c531993fae8b4d26a58b53e35c1981f17a3910184229a15720785d9b21b1cf614c4aeb81f04ea2e64472d641ccc255579eb020e42c66573a4140a602aecf8a309bea2b2d177a5e483c9de8a53efee40b5fe7709bf5df8d489d0c85fa7cb708982e7fa6d25fb2d9d5683b760f32d739882cc9e345ee1af902b2050cf2323f0e5a3f490248fd140ec37a498c6e70af60078076f9bc03cc89dcdd98213654ca7b02faa29304f33fe7f13fbd235bcda489a1b4304f49aafaec938c7adc48539470624db62b4dd36639ef98d3fc58faf6637674bd9809fddae1c3af791ea6b606bc5638a58bccdde5e152cde58a9d66c8cb5dff6e56faa539f7e3b97cccc62df459d6eeb1d9ceab66d345a26f87539238d72f4e1f9c75ce33e568d8fa3ace90497ee0c60dc921ee2564404fa114b050fe0924ce63518ef4882a6b3e569b1a1121011f5ffe17da1c9f26d9940963740e57257f763c132b82d8d4acc924fac41dffbbea6e6f9b461be5163b04cdccd27d0ff91e007e00836e94daf039d19c85301421b91d326aef7878e725ae99d6a75ddbaabde90c8e6805b4c09c6ace40a6eecd75ddf42695b955a7a827b24833d256f8d7aa7ecd8b40edba44083f97bf5df2a5009115ef6507bef2307a809183154b1f00ef231a25bf9013ccbc9efa69a1a0b87b49884255e30cc2e27082b36550ef3cb1e42ce09cc1b59111d017f848aa929c8ea84fa58562b39fc3125f567277dd4c04fcfa3d75f5ffc087e2622b02b0bb78713e872c02796ef64c8f1fd347f23c20b5e1256c1885bcece4786e151fe05fd63783e43070be1a305cd21013b659823e335cab841c21e66af325a3cfb7d2cd8e69a0faccf9fae45316d26f37f2cdf675eeb84286f559534f8c5cb84381c469668b050c53927109b8cc10ca687f0d3c56e297256850080",
      450,
      900,
      7074000
    );
    const customValidators = createValidators(3);
    const block0 = getGenesis(customValidators);
    const block0Hash = hash(block0);
    const block0Encoded = encoded(block0);
    const [block1, block1Encoded, block1Hash] = composeAndSignBlock(
      1,
      1,
      0,
      block0Hash,
      customValidators,
      2,
      [],
      []
    );

    const custom = await factory.deploy();
    await custom.init(
      customValidators.map((item) => {
        return item.address;
      }),
      block0Encoded,
      block1Encoded,
      5,
      10,
      0
    );
    const customBlock0 = { hash: block0Hash, encoded: block0Encoded };
    const customeBlock1 = { hash: block1Hash, encoded: block1Encoded };

    return {
      checkpoint,
      custom,
      customValidators,
      customBlock0,
      customeBlock1,
    };
  };

  beforeEach("deploy fixture", async () => {
    ({ checkpoint, custom, customValidators, customBlock0, customeBlock1 } =
      await loadFixture(fixture));
  });

  describe("test checkpoint real block data", () => {
    it("should receive new header", async () => {
      await checkpoint.receiveHeader([block7074002Encoded]);

      const block7074002Hash = blockToHash(block7074002Encoded);
      const block7074002Resp = await checkpoint.getHeader(block7074002Hash);
      const latestBlocks = await checkpoint.getLatestBlocks();

      expect(block7074002Resp.finalized).to.eq(false);

      expect(latestBlocks[0].hash).to.eq(block7074002Hash);
    });

    // it("should confirm a received block", async () => {
    //   await checkpoint.receiveHeader([block2Encoded, block3Encoded]);
    //   await checkpoint.receiveHeader([block4Encoded, block5Encoded]);

    //   const block2Hash = blockToHash(block2Encoded);
    //   const block5Hash = blockToHash(block5Encoded);

    //   const block2Resp = await checkpoint.getHeader(block2Hash);
    //   const latestBlocks = await checkpoint.getLatestBlocks();

    //   expect(block2Resp.finalized).to.eq(true);
    //   expect(latestBlocks[0].hash).to.eq(block5Hash);
    //   expect(latestBlocks[1].hash).to.eq(block2Hash);
    // });
    // it("should mainnet num submit", async () => {
    //   await checkpoint.receiveHeader([block2Encoded, block3Encoded]);
    //   await checkpoint.receiveHeader([block4Encoded, block5Encoded]);

    //   const block2Hash = blockToHash(block2Encoded);
    //   const block3Hash = blockToHash(block3Encoded);
    //   const block2Resp = await checkpoint.getHeader(block2Hash);

    //   expect(block2Resp.number).to.eq(2);
    //   expect(block2Resp.roundNum).to.eq(4);
    //   expect(block2Resp.mainnetNum).to.not.eq(-1);
    //   expect(block2Resp.finalized).to.eq(true);
    //   const block3Resp = await checkpoint.getHeader(block3Hash);
    //   expect(block3Resp.mainnetNum).to.eq(-1);
    // });
  });

  //   describe("test checkpoint custom block data", () => {
  //     it("should receive new header", async () => {
  //       const [block2, block2Encoded, block2Hash] = composeAndSignBlock(
  //         2,
  //         2,
  //         1,
  //         customeBlock1["hash"],
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       await custom.receiveHeader([block2Encoded]);

  //       const block2Resp = await custom.getHeader(block2Hash);
  //       const latestBlocks = await custom.getLatestBlocks();

  //       expect(block2Resp.finalized).to.eq(false);

  //       expect(latestBlocks[0].hash).to.eq(block2Hash);
  //     });
  //     it("should confirm a received block", async () => {
  //       const [block2, block2Encoded, block2Hash] = composeAndSignBlock(
  //         2,
  //         2,
  //         1,
  //         customeBlock1["hash"],
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block3, block3Encoded, block3Hash] = composeAndSignBlock(
  //         3,
  //         3,
  //         2,
  //         block2Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block4, block4Encoded, block4Hash] = composeAndSignBlock(
  //         4,
  //         4,
  //         3,
  //         block3Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block5, block5Encoded, block5Hash] = composeAndSignBlock(
  //         5,
  //         5,
  //         4,
  //         block4Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       await custom.receiveHeader([block2Encoded, block3Encoded]);
  //       await custom.receiveHeader([block4Encoded, block5Encoded]);

  //       const block2Resp = await custom.getHeader(block2Hash);
  //       const latestBlocks = await custom.getLatestBlocks();

  //       expect(block2Resp.finalized).to.eq(true);
  //       expect(latestBlocks[0].hash).to.eq(block5Hash);
  //       expect(latestBlocks[1].hash).to.eq(block2Hash);
  //     });
  //     it("should switch a validator set", async () => {
  //       const [block2, block2Encoded, block2Hash] = composeAndSignBlock(
  //         2,
  //         2,
  //         1,
  //         customeBlock1["hash"],
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block3, block3Encoded, block3Hash] = composeAndSignBlock(
  //         3,
  //         3,
  //         2,
  //         block2Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block4, block4Encoded, block4Hash] = composeAndSignBlock(
  //         4,
  //         4,
  //         3,
  //         block3Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block5, block5Encoded, block5Hash] = composeAndSignBlock(
  //         5,
  //         5,
  //         4,
  //         block4Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );

  //       const next = createValidators(3);

  //       const [block6, block6Encoded, block6Hash] = composeAndSignBlock(
  //         6,
  //         6,
  //         5,
  //         block5Hash,
  //         customValidators,
  //         2,
  //         [],
  //         next.map((item) => item.address)
  //       );
  //       const [block7, block7Encoded, block7Hash] = composeAndSignBlock(
  //         7,
  //         7,
  //         6,
  //         block6Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block8, block8Encoded, block8Hash] = composeAndSignBlock(
  //         8,
  //         8,
  //         7,
  //         block7Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block9, block9Encoded, block9Hash] = composeAndSignBlock(
  //         9,
  //         9,
  //         8,
  //         block8Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block10, block10Encoded, block10Hash] = composeAndSignBlock(
  //         10,
  //         10,
  //         9,
  //         block9Hash,
  //         customValidators,
  //         2,
  //         next.map((item) => item.address),
  //         []
  //       );
  //       await custom.receiveHeader([block2Encoded, block3Encoded, block4Encoded]);

  //       await custom.receiveHeader([block5Encoded, block6Encoded, block7Encoded]);

  //       await custom.receiveHeader([
  //         block8Encoded,
  //         block9Encoded,
  //         block10Encoded,
  //       ]);

  //       const block7Resp = await custom.getHeader(block7Hash);

  //       expect(block7Resp.parentHash).to.eq(block6Hash);
  //       expect(block7Resp.number).to.eq(7);
  //       expect(block7Resp.roundNum).to.eq(7);
  //       expect(block7Resp.finalized).to.eq(true);
  //       const latestBlocks = await custom.getLatestBlocks();
  //       expect(latestBlocks[0].hash).to.eq(block10Hash);
  //       expect(latestBlocks[1].hash).to.eq(block7Hash);

  //       const blockHeader7Resp = await custom.getHeaderByNumber(7);

  //       expect(blockHeader7Resp.hash).to.eq(block7Hash);
  //       expect(blockHeader7Resp.number).to.eq(7);

  //       const blockHeader8Resp = await custom.getHeaderByNumber(8);
  //       expect(blockHeader8Resp.hash).to.eq(block8Hash);
  //       expect(blockHeader8Resp.number).to.eq(8);

  //       const currentValidators = await custom.getCurrentValidators();
  //       expect(currentValidators[0]).to.deep.eq(next.map((item) => item.address));
  //     });

  //     it("should penalty validitor verify", async () => {
  //       const [block2, block2Encoded, block2Hash] = composeAndSignBlock(
  //         2,
  //         2,
  //         1,
  //         customeBlock1["hash"],
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block3, block3Encoded, block3Hash] = composeAndSignBlock(
  //         3,
  //         3,
  //         2,
  //         block2Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block4, block4Encoded, block4Hash] = composeAndSignBlock(
  //         4,
  //         4,
  //         3,
  //         block3Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block5, block5Encoded, block5Hash] = composeAndSignBlock(
  //         5,
  //         5,
  //         4,
  //         block4Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const next = createValidators(5);
  //       const penalties = [next[0], next[1]];
  //       const actualValidators = [next[2], next[3], next[4]];

  //       const [block6, block6Encoded, block6Hash] = composeAndSignBlock(
  //         6,
  //         6,
  //         5,
  //         block5Hash,
  //         customValidators,
  //         2,
  //         [],
  //         next.map((item) => item.address),
  //         penalties.map((item) => item.address)
  //       );
  //       const [block7, block7Encoded, block7Hash] = composeAndSignBlock(
  //         7,
  //         7,
  //         6,
  //         block6Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block8, block8Encoded, block8Hash] = composeAndSignBlock(
  //         8,
  //         8,
  //         7,
  //         block7Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block9, block9Encoded, block9Hash] = composeAndSignBlock(
  //         9,
  //         9,
  //         8,
  //         block8Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block10, block10Encoded, block10Hash] = composeAndSignBlock(
  //         10,
  //         10,
  //         9,
  //         block9Hash,
  //         customValidators,
  //         2,
  //         actualValidators.map((item) => item.address),
  //         []
  //       );
  //       await custom.receiveHeader([block2Encoded, block3Encoded, block4Encoded]);

  //       await custom.receiveHeader([block5Encoded, block6Encoded, block7Encoded]);

  //       await custom.receiveHeader([
  //         block8Encoded,
  //         block9Encoded,
  //         block10Encoded,
  //       ]);
  //       const currentValidators = await custom.getCurrentValidators();
  //       expect(currentValidators[0]).to.deep.eq(
  //         actualValidators.map((item) => item.address)
  //       );
  //     });
  //     it("should mainnet num submit", async () => {
  //       const [block2, block2Encoded, block2Hash] = composeAndSignBlock(
  //         2,
  //         2,
  //         1,
  //         customeBlock1["hash"],
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block3, block3Encoded, block3Hash] = composeAndSignBlock(
  //         3,
  //         3,
  //         2,
  //         block2Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block4, block4Encoded, block4Hash] = composeAndSignBlock(
  //         4,
  //         4,
  //         3,
  //         block3Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       const [block5, block5Encoded, block5Hash] = composeAndSignBlock(
  //         5,
  //         5,
  //         4,
  //         block4Hash,
  //         customValidators,
  //         2,
  //         [],
  //         []
  //       );
  //       await custom.receiveHeader([block2Encoded, block3Encoded]);
  //       await custom.receiveHeader([block4Encoded, block5Encoded]);

  //       const block2Resp = await custom.getHeader(block2Hash);
  //       expect(block2Resp.number).to.eq(2);
  //       expect(block2Resp.roundNum).to.eq(2);
  //       expect(block2Resp.mainnetNum).to.not.eq(-1);
  //       expect(block2Resp.finalized).to.eq(true);
  //       const block3Resp = await custom.getHeader(block3Hash);
  //       expect(block3Resp.mainnetNum).to.eq(-1);
  //     });
  //   });
});
