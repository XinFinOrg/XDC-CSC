const { expect } = require("chai");
const { ethers } = require("hardhat");
const {
  loadFixture,
} = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const {
  getGenesis,
  hex2Arr,
  blockToHash,
  hash,
  encoded,
  getSigs,
  composeAndSignBlockMainnet,
  createValidators,
} = require("./libraries/Utils");

describe("reverse full checkpoint", () => {
  const block7074001Encoded =
    "0xf90a53a0df1eb735dc7de572c13109a8c2377e1f11c131d061c6552bf690dcfa27f9498da01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479409be15344bf20d7207d87dd41b5b9a6ea7c41f76a022c8813d7f802f94d3a279515a032e0da9d6430dda6a4512cb4872852ab7a84aa07c3200267d209f2dfd5a9bdb6577a52662944fe9f3de2ebcbada7612877b411fa0bcd2a51669cdca54e5f28517bcd09ca95007951a7d7ec181cb3f361f783cde4abbf0d1841908b10080846489d885b002ee01ece6a0df1eb735dc7de572c13109a8c2377e1f11c131d061c6552bf690dcfa27f9498d80836bf0d0c0836bef0ea00000000000000000000000000000000000000000000000000000000000000000880000000000000000b907e402e98d4800a1369868aff80d0c82b0c668108ac309be15344bf20d7207d87dd41b5b9a6ea7c41f760ef0bdd3d485d84fb46fd20c88b3f9d3ed5e03731362c3a7752c0059f663af89f73b17f7b8642c6d14f375e18a878abb4b713328e392abce98f07bfd1987873cc0ad97599d5f7b80602bfa942b52e4391997d2fca748a251c7dc12216cccd4532adf72e81de985a7037fe83cf0c938b498b4ba7de02d890e21196cccb5b588a6fea44c23c6e156d7711c30772150dd6f5c8f2b078a2a6df0538e2ad69661fb9d2432da278eae64e310382744581fc1f2fd36674524edeba8b4e89329a86a41c940d99b55085164f125c0f3009282bb10114229787df2b39f9cfcb8232aee05a4089dd483a2cbfc0388e5a4069289c8482ef96e7e896a8e4df917e90753249526a23b974c2fa91ce4c5f072b0a5bee07955124f259d8bf9bb311bdf9066246e68559816e7f636435867f824ef31d6d14124ba0f54df91e1e5812e3d76a35d0db631d6f7553bf0a9ad038a84f3edc1d694e93a1d11320b183a4d5d9cf5e2fc9f5b9ce7e8df5ab0d11032606c74a18c3e97fa0e87d2e64096852676740f33f5430cc4430168a672a7a447cd8f9753840b3d3880873e90db6a3fc103d08a79a78da145c8dd503a325916f342fbdbd3b890442b668c6a1d8872423ea65e96d70ef812c87beb85ce6d4b017815dc26442a44a6fc20f5b8dfa8b304d7137581f7e6bef345b2277d51d3a79f2b862bb4061d2c7689aa747e47318441696e9ae962633c16e04d53935272639d492e4a95b058af0700743c623497969ed8f877f44a463178f69e99a9ca55d589bf5a52cfbda21e625058dfe24ef6b537b5bc47116a45f0428da182fa52e78df27ca83be8716a77882da63a8dac227dac537fc89618edae86950e12687a612e15c4786b8453889bdf5a2b4e73164a350b05828e178ecd8e0954b337ae16f0d2503035a135854339129311a9aa55dd80e54c9a055fb9e4707e315f94dc3e3de7d258f319405ebc54d6af94051eba88f72faed209fe5d526a911c446536e28034f0d6ab7fd6c3e6a6b460b64be79975292f39d4143dd2024d11ee1040ff6965556e29fa531dbfa09ea0b86aca0019eaa5b66a3c21fc43d3a83605b6c1059fbf643fad3610836a8a9bda9e07f06d865009cae6bc49799132314d73898cc3c5beca5841306b26fdb4e30411392a6a74826141342a4dc33a1045cefa4182b6212ec0317720793aa90b37f690a4b30d51b393b7b25ba4d27bab2893881f5bd4818f7ba7e37eb88e28b4d7507bc30fbeb7208192d1474b5f87ffbc056de43c117e74c953fd114917049df193ff41183f5c7dcc7b819ae84bb23b6b7b36ad5c4c24081cd4198ba885888c073313b36cf03cf1f739f39443551ff12bbe8bb6ec97227cabeea13bc95488afce99fd798c598c16ecad3a93a2bcb3da3f8568d1ad91a83233af8d993351c0e2db739f9bcbfdeda94d73b50b16d39344e5fbb404ada5c610ef621404b5b8ecf4f6259c2dfc7c4e76865826559dd3de57044d2a87b6689cb0f80ac5a82dcf2e1ea59f0342f05c0205e5d89da7d94647c13e365e7853830f2135c70c6e0252a019e95cf81af68c7d6ee555fc43ba235d923fdea242960b7ca1937e826bda6c397df74d9f9ab01aa533166516f1e8828b5cbb8fc3fdfa5ec9a7548ea89af636787499e81362e815e36f28763eac120babebf5a6cbe6113780cbe489e3eb0db882381aebad378a4029f19ad548de4c77cfa8acdda4e77f5eae1662eeec3e17cc34e69f90b8bf59bb1a104a30aeecdc584921a3f2a056cb10f543ea59f8712ec4af81190100d82f41ad2c95898195c7a47dc59115b4b6c967331fc8ac25c217bbccf41ff3e093aaa0bb5ec85408683795da2f604a5c0464868eabfcb6be323be86be3a2027a3a2300d974e01b7cd036d5bf44f8461f28d92035a48a359d16c0ccf70b065fbfc2405e700adda95c0074fd23c967006e8f3230c03e80173d064c3c531993fae8b4d26a58b53e35c1981f17a3910184229a15720785d9b21b1cf614c4aeb81f04ea2e64472d641ccc255579eb020e42c66573a4140a602aecf8a309bea2b2d177a5e483c9de8a53efee40b5fe7709bf5df8d489d0c85fa7cb708982e7fa6d25fb2d9d5683b760f32d739882cc9e345ee1af902b2050cf2323f0e5a3f490248fd140ec37a498c6e70af60078076f9bc03cc89dcdd98213654ca7b02faa29304f33fe7f13fbd235bcda489a1b4304f49aafaec938c7adc48539470624db62b4dd36639ef98d3fc58faf6637674bd9809fddae1c3af791ea6b606bc5638a58bccdde5e152cde58a9d66c8cb5dff6e56faa539f7e3b97cccc62df459d6eeb1d9ceab66d345a26f87539238d72f4e1f9c75ce33e568d8fa3ace90497ee0c60dc921ee2564404fa114b050fe0924ce63518ef4882a6b3e569b1a1121011f5ffe17da1c9f26d9940963740e57257f763c132b82d8d4acc924fac41dffbbea6e6f9b461be5163b04cdccd27d0ff91e007e00836e94daf039d19c85301421b91d326aef7878e725ae99d6a75ddbaabde90c8e6805b4c09c6ace40a6eecd75ddf42695b955a7a827b24833d256f8d7aa7ecd8b40edba44083f97bf5df2a5009115ef6507bef2307a809183154b1f00ef231a25bf9013ccbc9efa69a1a0b87b49884255e30cc2e27082b36550ef3cb1e42ce09cc1b59111d017f848aa929c8ea84fa58562b39fc3125f567277dd4c04fcfa3d75f5ffc087e2622b02b0bb78713e872c02796ef64c8f1fd347f23c20b5e1256c1885bcece4786e151fe05fd63783e43070be1a305cd21013b659823e335cab841c21e66af325a3cfb7d2cd8e69a0faccf9fae45316d26f37f2cdf675eeb84286f559534f8c5cb84381c469668b050c53927109b8cc10ca687f0d3c56e297256850080";

  const block7074002Encoded =
    "";

  const block7074003Encoded =
    "";
  const block7074004Encoded =
    "";
  const block7074005Encoded =
    "";

  let checkpoint;
  let custom;
  let customValidators;
  let customBlock0;
  let customeBlock1;

  const fixture = async () => {
    const factory = await ethers.getContractFactory("ReverseFullCheckpoint");
    const checkpoint = await factory.deploy();

    await checkpoint.init(block7074001Encoded, 900, 7074001);
    const customValidators = createValidators(3);
    const block0 = getGenesis(customValidators);
    const block0Hash = hash(block0);
    const block0Encoded = encoded(block0);
    const [block1, block1Encoded, block1Hash] = composeAndSignBlockMainnet(
      1,
      1,
      0,
      block0Hash,
      customValidators,
      2,
      customValidators.map((item) => {
        return item.address;
      }),
      []
    );

    const custom = await factory.deploy();
    await custom.init(block1Encoded, 10, 1);
    const customBlock0 = { hash: block0Hash, encoded: block0Encoded };
    const customeBlock1 = { hash: block1Hash, encoded: block1Encoded };

    return {
      checkpoint,
      custom,
      customValidators,
      customBlock0,
      customeBlock1,
    };
  };

  beforeEach("deploy fixture", async () => {
    ({ checkpoint, custom, customValidators, customBlock0, customeBlock1 } =
      await loadFixture(fixture));
  });

  describe("test checkpoint real block data", () => {
    it("should receive new header", async () => {
      await checkpoint.receiveHeader([block7074002Encoded]);

      const block7074002Hash = blockToHash(block7074002Encoded);
      const block7074002Resp = await checkpoint.getHeader(block7074002Hash);
      const latestBlocks = await checkpoint.getLatestBlocks();

      expect(block7074002Resp.finalized).to.eq(false);

      expect(latestBlocks[0].hash).to.eq(block7074002Hash);
    });

    it("should confirm a received block", async () => {
      await checkpoint.receiveHeader([
        block7074002Encoded,
        block7074003Encoded,
      ]);
      await checkpoint.receiveHeader([
        block7074004Encoded,
        block7074005Encoded,
      ]);

      const block7074002Hash = blockToHash(block7074002Encoded);
      const block7074005Hash = blockToHash(block7074005Encoded);

      const block7074002Resp = await checkpoint.getHeader(block7074002Hash);
      const latestBlocks = await checkpoint.getLatestBlocks();

      expect(block7074002Resp.finalized).to.eq(true);
      expect(latestBlocks[0].hash).to.eq(block7074005Hash);
      expect(latestBlocks[1].hash).to.eq(block7074002Hash);
    });
    it("should mainnet num submit", async () => {
      await checkpoint.receiveHeader([
        block7074002Encoded,
        block7074003Encoded,
      ]);
      await checkpoint.receiveHeader([
        block7074004Encoded,
        block7074005Encoded,
      ]);

      const block7074002Hash = blockToHash(block7074002Encoded);
      const block7074003Hash = blockToHash(block7074003Encoded);
      const block7074002Resp = await checkpoint.getHeader(block7074002Hash);

      expect(block7074002Resp.number).to.eq(7074002);
      expect(block7074002Resp.roundNum).to.eq(3);
      expect(block7074002Resp.mainnetNum).to.not.eq(-1);
      expect(block7074002Resp.finalized).to.eq(true);
      const block7074003Resp = await checkpoint.getHeader(block7074003Hash);
      expect(block7074003Resp.mainnetNum).to.eq(-1);
    });
  });

  describe("test checkpoint custom block data", () => {
    it("should receive new header", async () => {
      const [block2, block2Encoded, block2Hash] = composeAndSignBlockMainnet(
        2,
        2,
        1,
        customeBlock1["hash"],
        customValidators,
        3,
        [],
        []
      );
      await custom.receiveHeader([block2Encoded]);

      const block2Resp = await custom.getHeader(block2Hash);
      const latestBlocks = await custom.getLatestBlocks();

      expect(block2Resp.finalized).to.eq(false);

      expect(latestBlocks[0].hash).to.eq(block2Hash);
    });
    it("should confirm a received block", async () => {
      const [block2, block2Encoded, block2Hash] = composeAndSignBlockMainnet(
        2,
        2,
        1,
        customeBlock1["hash"],
        customValidators,
        3,
        [],
        []
      );
      const [block3, block3Encoded, block3Hash] = composeAndSignBlockMainnet(
        3,
        3,
        2,
        block2Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block4, block4Encoded, block4Hash] = composeAndSignBlockMainnet(
        4,
        4,
        3,
        block3Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block5, block5Encoded, block5Hash] = composeAndSignBlockMainnet(
        5,
        5,
        4,
        block4Hash,
        customValidators,
        3,
        [],
        []
      );
      await custom.receiveHeader([block2Encoded, block3Encoded]);
      await custom.receiveHeader([block4Encoded, block5Encoded]);

      const block2Resp = await custom.getHeader(block2Hash);
      const latestBlocks = await custom.getLatestBlocks();

      expect(block2Resp.finalized).to.eq(true);
      expect(latestBlocks[0].hash).to.eq(block5Hash);
      expect(latestBlocks[1].hash).to.eq(block2Hash);
    });
    it("should switch a validator set", async () => {
      const [block2, block2Encoded, block2Hash] = composeAndSignBlockMainnet(
        2,
        2,
        1,
        customeBlock1["hash"],
        customValidators,
        3,
        [],
        []
      );
      const [block3, block3Encoded, block3Hash] = composeAndSignBlockMainnet(
        3,
        3,
        2,
        block2Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block4, block4Encoded, block4Hash] = composeAndSignBlockMainnet(
        4,
        4,
        3,
        block3Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block5, block5Encoded, block5Hash] = composeAndSignBlockMainnet(
        5,
        5,
        4,
        block4Hash,
        customValidators,
        3,
        [],
        []
      );

      const [block6, block6Encoded, block6Hash] = composeAndSignBlockMainnet(
        6,
        6,
        5,
        block5Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block7, block7Encoded, block7Hash] = composeAndSignBlockMainnet(
        7,
        7,
        6,
        block6Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block8, block8Encoded, block8Hash] = composeAndSignBlockMainnet(
        8,
        8,
        7,
        block7Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block9, block9Encoded, block9Hash] = composeAndSignBlockMainnet(
        9,
        9,
        8,
        block8Hash,
        customValidators,
        3,
        [],
        []
      );
      const next = createValidators(3);

      const [block10, block10Encoded, block10Hash] = composeAndSignBlockMainnet(
        10,
        10,
        9,
        block9Hash,
        customValidators,
        3,
        next.map((item) => item.address),
        []
      );
      await custom.receiveHeader([block2Encoded, block3Encoded, block4Encoded]);

      await custom.receiveHeader([block5Encoded, block6Encoded, block7Encoded]);

      await custom.receiveHeader([
        block8Encoded,
        block9Encoded,
        block10Encoded,
      ]);

      const block7Resp = await custom.getHeader(block7Hash);

      expect(block7Resp.parentHash).to.eq(block6Hash);
      expect(block7Resp.number).to.eq(7);
      expect(block7Resp.roundNum).to.eq(7);
      expect(block7Resp.finalized).to.eq(true);
      const latestBlocks = await custom.getLatestBlocks();
      expect(latestBlocks[0].hash).to.eq(block10Hash);
      expect(latestBlocks[1].hash).to.eq(block7Hash);

      const blockHeader7Resp = await custom.getHeaderByNumber(7);

      expect(blockHeader7Resp.hash).to.eq(block7Hash);
      expect(blockHeader7Resp.number).to.eq(7);

      const blockHeader8Resp = await custom.getHeaderByNumber(8);
      expect(blockHeader8Resp.hash).to.eq(block8Hash);
      expect(blockHeader8Resp.number).to.eq(8);

      const currentValidators = await custom.getCurrentValidators();

      expect(currentValidators[0]).to.deep.eq(next.map((item) => item.address));
    });

    it("should penalty validitor verify", async () => {
      const [block2, block2Encoded, block2Hash] = composeAndSignBlockMainnet(
        2,
        2,
        1,
        customeBlock1["hash"],
        customValidators,
        3,
        [],
        []
      );
      const [block3, block3Encoded, block3Hash] = composeAndSignBlockMainnet(
        3,
        3,
        2,
        block2Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block4, block4Encoded, block4Hash] = composeAndSignBlockMainnet(
        4,
        4,
        3,
        block3Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block5, block5Encoded, block5Hash] = composeAndSignBlockMainnet(
        5,
        5,
        4,
        block4Hash,
        customValidators,
        3,
        [],
        []
      );

      const [block6, block6Encoded, block6Hash] = composeAndSignBlockMainnet(
        6,
        6,
        5,
        block5Hash,
        customValidators,
        3,
        [],
        [],
        []
      );
      const [block7, block7Encoded, block7Hash] = composeAndSignBlockMainnet(
        7,
        7,
        6,
        block6Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block8, block8Encoded, block8Hash] = composeAndSignBlockMainnet(
        8,
        8,
        7,
        block7Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block9, block9Encoded, block9Hash] = composeAndSignBlockMainnet(
        9,
        9,
        8,
        block8Hash,
        customValidators,
        3,
        [],
        []
      );
      const next = createValidators(5);
      const penalties = [next[0], next[1]];
      const actualValidators = [next[2], next[3], next[4]];

      const [block10, block10Encoded, block10Hash] = composeAndSignBlockMainnet(
        10,
        10,
        9,
        block9Hash,
        customValidators,
        3,
        next.map((item) => item.address),
        penalties.map((item) => item.address)
      );
      await custom.receiveHeader([block2Encoded, block3Encoded, block4Encoded]);

      await custom.receiveHeader([block5Encoded, block6Encoded, block7Encoded]);

      await custom.receiveHeader([
        block8Encoded,
        block9Encoded,
        block10Encoded,
      ]);
      const currentValidators = await custom.getCurrentValidators();
      expect(currentValidators[0]).to.deep.eq(
        actualValidators.map((item) => item.address)
      );
    });
    it("should mainnet num submit", async () => {
      const [block2, block2Encoded, block2Hash] = composeAndSignBlockMainnet(
        2,
        2,
        1,
        customeBlock1["hash"],
        customValidators,
        3,
        [],
        []
      );
      const [block3, block3Encoded, block3Hash] = composeAndSignBlockMainnet(
        3,
        3,
        2,
        block2Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block4, block4Encoded, block4Hash] = composeAndSignBlockMainnet(
        4,
        4,
        3,
        block3Hash,
        customValidators,
        3,
        [],
        []
      );
      const [block5, block5Encoded, block5Hash] = composeAndSignBlockMainnet(
        5,
        5,
        4,
        block4Hash,
        customValidators,
        3,
        [],
        []
      );
      await custom.receiveHeader([block2Encoded, block3Encoded]);
      await custom.receiveHeader([block4Encoded, block5Encoded]);

      const block2Resp = await custom.getHeader(block2Hash);
      expect(block2Resp.number).to.eq(2);
      expect(block2Resp.roundNum).to.eq(2);
      expect(block2Resp.mainnetNum).to.not.eq(-1);
      expect(block2Resp.finalized).to.eq(true);
      const block3Resp = await custom.getHeader(block3Hash);
      expect(block3Resp.mainnetNum).to.eq(-1);
    });
  });
});
